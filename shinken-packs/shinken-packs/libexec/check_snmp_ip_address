#!/bin/sh

# Copyright: 2017 Francois Lafont <francois.lafont@ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='i:'
SPECIFIC_LONG_OPTIONS='ip:'
SPECIFIC_SYNOPSIS='--ip <IP-address>'

GET_SPECIFIC_OPTIONS () {

    case "$1" in

        --ip|-i)
            ip_address="$2"
            return 2
        ;;

    esac

    return 0
}

. "$SCRIPT_DIRECTORY/share/snmp.sh"

if [ -z "$ip_address" ]
then
    printf 'Sorry you must provide the --ip option with a non empty value.\n'
    exit "$CODE_UNKNOWN"
fi

# The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_ip_addresses"' in text format.
oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.16.103.101.116.95.105.112.95.97.100.100.114.101.115.115.101.115'

# Getting of the puppet status.
output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" "$oid" 2>&1)

# Remove leading and trailing double quotes.
output="${output#\"}"
output="${output%\"}"

# Validation of the output.
if printf '%s' "$output" | grep -q --fixed-strings --line-regexp '127.0.0.1'
then
    good_output='true'
else
    good_output='false'
fi

if "$good_output"
then
    if printf '%s' "$output" | grep -q --fixed-strings --line-regexp "$ip_address"
    then
        msg='OK, the IP address %s is well defined on the host.\n'
        printf "$msg" "$ip_address"
        exit "$CODE_OK"
    else
        msg='CRITICAL, the IP address %s is not defined on the host.\n'
        printf "$msg" "$ip_address"
        exit "$CODE_CRITICAL"
    fi
else
    # The output is not valid.
    output=$(printf '%s' "$output" | tr '\n' ' ')
    printf 'Unexpected output: %s\n' "$output"
    exit "$CODE_UNKNOWN"
fi


