#!/bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#set -x
SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='w:,m:'
SPECIFIC_LONG_OPTIONS='warning:,max-uptime:'
SPECIFIC_SYNOPSIS='[--warning <minutes> --max-uptime <minutes>]'

# Default thresholds etc.
warning=30
max_uptime='0'

GET_SPECIFIC_OPTIONS () {
    case "$1" in

        --warning|-w)
            warning="$2"
            return 2
        ;;

        --max-uptime|-m)
            max_uptime="$2"
            return 2
        ;;

    esac
    return 0
}

. "$SCRIPT_DIRECTORY/share/snmp.sh"

# The oid of the "uptime" object in digital format which corresponds to the
# "HOST-RESOURCES-MIB::hrSystemUptime.0" in text format.
OID='.1.3.6.1.2.1.25.1.1.0'

if ! printf '%s\n' "$warning" | grep -qE '^[0-9]+$'
then
    printf 'Error, the value of the --warning option must be an integer.\n'
    exit "$CODE_UNKNOWN"
fi

if ! printf '%s\n' "$max_uptime" | grep -qE '^[0-9]+$'
then
    printf 'Error, the value of the --max-uptime option must be an integer.\n'
    exit "$CODE_UNKNOWN"
fi

if [ "$max_uptime" != '0' ]
then
    diff=$((max_uptime - warning))
    if [ "$diff" -le 60 ]
    then
        printf 'Error, this condition is required when max-uptime is not zero: max-uptime - warning > 60 minutes.\n'
        exit "$CODE_UNKNOWN"
    fi
fi

# Getting of the host uptime.
if output=$(snmpget $SNMP_CMD_OPTIONS -Ovt "$HOSTNAME" "$OID" 2>&1)
then
    # The "snmpget" command has succeeded.
    if printf '%s\n' "$output" | grep -qE '^[0-9]+$'
    then
        # The output is correct, but in cs. Convert in seconds.
        uptime=$((output / 100))
        warning_in_seconds=$((warning * 60 ))

        if [ "$uptime" -lt "$warning_in_seconds" ]
        then
            printf 'WARNING, uptime=%ss which is less than %s minutes: the host has rebooted.\n' "$uptime" "$warning"
            exit "$CODE_WARNING"
        else
            if [ "$max_uptime" = 0 ]
            then
                # We don't check if the uptime is to too high.
                printf 'OK, uptime=%ss which is greater than %s minutes: no reboot.\n' "$uptime" "$warning"
                exit "$CODE_OK"
            else
                max_uptime_in_seconds=$((max_uptime * 60 ))
                # We want to check if the uptime is to too high.
                if [ "$uptime" -gt "$max_uptime_in_seconds" ]
                then
                    printf 'WARNING, uptime=%ss which is too high (greater than the threshold %s minutes).\n' "$uptime" "$max_uptime"
                    exit "$CODE_WARNING"
                else
                    printf 'OK, uptime=%ss which is between %s and %s minutes : no reboot and the uptime is not too high.\n' "$uptime" "$warning" "$max_uptime"
                    exit "$CODE_OK"
                fi
            fi
        fi
   else
        # The output is incorrect (unlikely when the "snmpget" command has succeeded).
        printf 'Unexpected output of the snmpget command: "%s"\n' "$output"
        exit "$CODE_UNKNOWN"
    fi
else
    # The "snmpget" command hasn't succeeded.
    printf 'Problem during the snmpget command: %s\n' "$output"
    exit "$CODE_UNKNOWN"
fi


