#!/bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@crdp.ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#set -x
SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}

. "$SCRIPT_DIRECTORY/share/check_snmp_header"

# The oid of the "uptime" object in digital format which corresponds to the
# "HOST-RESOURCES-MIB::hrSystemUptime.0" in text format.
OID='.1.3.6.1.2.1.25.1.1.0'

if ! echo "$warning" | grep -qE '^[0-9]+$'
then
    echo 'Error, the --warning option must give an "integer" value.'
    exit "$UNKNOWN"
fi

# Getting of the host uptime.
if output=$(snmpget -Ovt -r "$retry" -t "$timeout" $AUTH_OPTIONS "$host" "$OID" 2>&1); then

    # The "snmpget" command has succeeded.
    if echo "$output" | grep -qE '^[0-9]+$'
    then

        ## The output is correct, but in cs. Convert in seconds.
        uptime=$((output / 100))
        warning_in_seconds=$((warning * 60 ))

        if [ "$uptime" -lt "$warning_in_seconds" ]
        then
            echo "WARNING, uptime (${uptime}s) =< $warning min: the host has rebooted."
            exit "$WARNING"
        else
            echo "OK, uptime (${uptime}s) > $warning min: no reboot."
            exit "$OK"
        fi
   else

        ## The output is incorrect (unlikely when the "snmpget" command has succeeded).
        echo "Unexpected output in the snmpget request: \"$output\""
        exit "$UNKNOWN"

    fi

else

    # The "snmpget" command hasn't succeeded.
    echo "$output"
    exit "$UNKNOWN"

fi


