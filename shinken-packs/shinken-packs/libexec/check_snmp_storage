#!/bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@crdp.ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#set -x
SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='w:,c:,e:'
SPECIFIC_LONG_OPTIONS='warning:,critical:,exceptions:'
SPECIFIC_SYNOPSIS='--warning <percent> --critical <percent> [--exceptions "<dir1>:90:95 <dir2>:50:60 ..."]'


GET_SPECIFIC_OPTIONS () {

    case "$1" in

        --warning|-w)
            default_warning="$2"
            return 2
        ;;

        --critical|-c)
            default_critical="$2"
            return 2
        ;;

        --exceptions|-e)
            exceptions="$2"
            return 2
        ;;

    esac

    return 0
}

. "$SCRIPT_DIRECTORY/share/snmp.sh"

# The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_storage"' in text format.
oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.11.103.101.116.95.115.116.111.114.97.103.101'

# Getting of the storage use.
if output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" $oid 2>&1) \
    && echo "$output" | grep -qE '^"?/?[^:]*:/[^:]*:[0-9]+:[0-9]+:'
then

    # Remove leading double quotes because snmpget adds leading
    # double quotes when we use a numerical OID (but not with
    # a string OID, it is not logical but it is so).
    output="${output#\"}"
    output="${output%\"}"

    # For the moment, everything's fine.
    CRIT="false"
    WARN="false"

    # The "snmpget" command has succeeded and has the good format.
    for line in $output
    do
        directory=$(echo "$line" | cut -d":" -f2)
        size_readable=$(echo "$line" | cut -d":" -f5)
        used_readable=$(echo "$line" | cut -d":" -f6)

        # Default tresholds.
        warning=$default_warning
        critical=$default_critical

        # Test if "$directory" is an exception.
        for exception in $exceptions
        do
            if [ "$directory" = "${exception%%:*}" ]
            then
                thresholds="${exception#*:}"
                warning="${thresholds%:*}"
                critical="${thresholds#*:}"
                #echo "$directory is an exception with $warning%,$critical%."
                break
            fi
        done

        # TODO: add an option (--real-percent) to have the real use percent.
        #size=$(echo "$line" | cut -d":" -f3)
        #used=$(echo "$line" | cut -d":" -f4)
        #percent=$(($used*100/$size))

        # We use the percent give by df command.
        percent=$(echo "$line" | cut -d":" -f7)
        percent=$(echo ${percent%\%})

        if [ "$percent" -ge "$critical" ]
        then
            CRIT="true"
            data_list_pb="$data_list_pb $directory $percent% ($used_readable/$size_readable),"
        elif [ "$percent" -ge "$warning" ]
        then
            WARN="true"
            data_list_pb="$data_list_pb $directory $percent% ($used_readable/$size_readable),"
        else
            data_list_ok="$data_list_ok $directory $percent% ($used_readable/$size_readable),"
        fi
    done

    data_list_ok=$(echo ${data_list_ok%,}) # remove of the "," and the space.
    data_list_pb=$(echo ${data_list_pb%,}) # remove of the "," and the space.

    if [ -n "$exceptions" ]
    then
        info="thresholds $default_warning%,$default_critical% and exception(s) $exceptions"
    else
        info="thresholds $default_warning%,$default_critical%"
    fi

    if "$CRIT"
    then
        echo "Disk space CRITICAL: $data_list_pb ($info)."
        exit "$CODE_CRITICAL"
    elif "$WARN"
    then
        echo "Disk space WARNING: $data_list_pb ($info)."
        exit "$CODE_WARNING"
    else
        echo "Disk space OK: $data_list_ok ($info)."
        exit "$CODE_OK"
    fi

else

    # The "snmpget" command hasn't succeeded.
    echo "$output"
    exit "$CODE_UNKNOWN"

fi



