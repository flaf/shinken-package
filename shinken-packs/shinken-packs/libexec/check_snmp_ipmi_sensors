#!/bin/sh

SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='e:'
SPECIFIC_LONG_OPTIONS='exclude:'
SPECIFIC_SYNOPSIS='[--exclude <regex>]'

GET_SPECIFIC_OPTIONS () {
    case "$1" in
        --exclude|-e)
            REGEX="$2"
            return 2
        ;;
    esac
    return 0
}

. "$SCRIPT_DIRECTORY/share/snmp.sh"

# The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_ipmi_status"' in text format.
oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.15.103.101.116.95.105.112.109.105.95.115.116.97.116.117.115'

old_IFS=$IFS
LINE_FEED='
'

# Getting of the host uptime.
if output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" "$oid" 2>&1)
then

    # Remove leading double quotes.
    output="${output#\"}"
    output="${output%\"}"

    line1=$(printf '%s' "$output" | head -n 1)
    if printf '%s' "$line1" | grep -q '^ID,Name,Type,State,Event$'
    then
        valid_output='true'
        field_sensor=2
        field_state=4
    elif printf '%s' "$line1" | grep -q '^Name,State$'
    then
        valid_output='true'
        field_sensor=1
        field_state=2
    else
        valid_output='false'
    fi

    if ! "$valid_output"
    then
        # The output is incorrect (unlikely when the "snmpget" command has succeeded).
        echo "Unexpected output in the snmpget request: \"$output\""
        exit "$CODE_UNKNOWN"
    fi

    # Remove header.
    output=$(echo "$output" | sed -n '1!p')

    all_is_ok=true
    list=''

    IFS="$LINE_FEED"
    for line in $output
    do
        sensor=$(echo "$line" | cut -d',' -f"$field_sensor")
        state=$(echo "$line" | cut -d',' -f"$field_state")

        # We skip the sensor too if REGEX is not empty and if it matches.
        [ -n "$REGEX" ] && (echo "$sensor" | grep -qE "$REGEX" 2>/dev/null) && continue

        [ "$state" = 'Nominal' ] && state=OK # "OK" is more explicit
        list="$list [$sensor]=$state"

        [ "$state" != 'OK' ] && all_is_ok=false

    done
    IFS="$old_IFS"

    list=$(echo $list)

    if "$all_is_ok"
    then
        echo "IPMI sensors OK: $list."
        exit "$CODE_OK"
    else
        echo "IPMI sensors WARNING: $list."
        exit "$CODE_WARNING"
    fi

else

    # The "snmpget" command hasn't succeeded.
    echo "$output"
    exit "$CODE_UNKNOWN"

fi


