#!/bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='w:'
SPECIFIC_LONG_OPTIONS='warning:'
SPECIFIC_SYNOPSIS='--warning <seconds>'

GET_SPECIFIC_OPTIONS () {

    case "$1" in

        --warning|-w)
            warning="$2"
            return 2
        ;;

    esac

    return 0
}

# Default value of warning.
warning=691200 # it's 8 days.

# Takes one integer as argument which represent seconds and
# displays an equivalent human readable time (ex: 5d 5h 3min 25s).
htime() {

  local T="$1"
  local D=$(( T / 86400     )) # T / 60 / 60 / 24
  local H=$(( T / 3600  %24 ))
  local M=$(( T / 60    %60 ))
  local S=$(( T         %60 ))

  result=$([ "$D" -gt 0 ] && printf '%dd ' "$D"
           [ "$H" -gt 0 ] && printf '%dh ' "$H"
           [ "$M" -gt 0 ] && printf '%dmin ' "$M"
           [ "$S" -gt 0 ] && printf '%ds ' "$S")

  # Remove trailing spaces.
  result="${result% *}"
  printf '%s' "$result"

}

. "$SCRIPT_DIRECTORY/share/snmp.sh"

# The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_puppet_run"' in text format.
oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.14.103.101.116.95.112.117.112.112.101.116.95.114.117.110'

# Getting of the puppet status.
output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" "$oid" 2>&1)

# Remove leading and trailing double quotes.
output="${output#\"}"
output="${output%\"}"

# Remove all trailing blanks.
output=$(printf '%s' "$output" | sed 's/[[:space:]]*$//g')

# Validation of the output. The field "changes" and "error" can be
# an integer or "N/A" or... empty (TODO: only for the old version
# of snmpd-extend).
if [ $(printf '%s\n' "$output" | wc -l) = 1 ] &&
   printf '%s' "$output" | grep -qE '^[0-9]+;([0-9]*|N/A);([0-9]*|N/A)$'
then
    good_output='true'
else
    good_output='false'
fi

if "$good_output"
then
    last_run="${output%%;*}"
    tmp="${output#*;}"
    changes="${tmp%;*}"
    errors="${tmp#*;}"

    hlast_run=$(htime "$last_run")

    if printf '%s' "$errors" | grep -qE '^[0-9]+$' && [ "$errors" -gt 0 ]
    then
        msg='Last puppet run WARNING: %s error(s) during the last run (%s ago).\n'
        printf "$msg" "$errors" "$hlast_run"
        exit "$CODE_WARNING"
    fi

    now=$(date '+%s')
    delta=$(( now - last_run ))
    hdelta=$(htime "$delta")
    hwarning=$(htime "$warning")

    if [ "$delta" -gt "$warning" ]
    then
        msg='Last puppet run WARNING: no error but was %s ago (threshold is %s).\n'
        printf "$msg" "$hdelta" "$hwarning"
        exit "$CODE_WARNING"
    else
        msg='Last puppet run OK: no error and was %s ago (threshold is %s).\n'
        printf "$msg" "$hdelta" "$hwarning"
        exit "$CODE_OK"
    fi
else
    # The output is not valid.
    output=$(printf '%s' "$output" | tr '\n' ' ')
    printf 'Unexpected output: %s\n' "$output"
    exit "$CODE_UNKNOWN"
fi


