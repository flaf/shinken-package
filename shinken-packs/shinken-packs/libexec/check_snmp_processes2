#!/bin/sh

SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS='p:,k'
SPECIFIC_LONG_OPTIONS='processes:,kernel'
SPECIFIC_SYNOPSIS='[--kernel] --processes "process1 process2..."'

GET_SPECIFIC_OPTIONS () {

    case "$1" in

        --processes|-p)
            processes="$2"
            return 2
        ;;

        --kernel|-k)
            kernel='true'
            return 1
        ;;

    esac

    return 0
}

# Non-kernel processes is the default.
kernel='false'

. "$SCRIPT_DIRECTORY/share/snmp.sh"

if [ -z "$processes" ]
then
    printf 'UNKNOWN: the value of the --processes option must be non empty.\n'
    exit "$CODE_UNKNOWN"
fi

if "$kernel"
then
    # The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_kprocesses"' in text format.
    oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.14.103.101.116.95.107.112.114.111.99.101.115.115.101.115'
    type='kernel'
else
    # The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_processes"' in text format.
    oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.13.103.101.116.95.112.114.111.99.101.115.115.101.115'
    type='non-kernel'
fi

output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" "$oid" 2>&1)

# Remove leading double quotes.
output="${output#\"}"
output="${output%\"}"

# A tip to be able to use the option -F (--fixed-strings)
# with grep below.
output=$(printf '%s' "$output" | sed 's/$/!/')

if printf '%s' "$output" | head -n1 | grep -Eq '^[0-9]+ [A-Z] [^[:space:]]+$'
then
    # We take only running or sleeping processes.
    rs_processes=$(printf '%s' "$output" | grep -E ' (R|S) ')

    not_present=''
    for process in $processes
    do
        # We use -F option (--fixed-strings) because maybe
        # the process contains a dot character in its name
        # and we don't want to have the dot interpreted as a
        # special character.
        if ! printf '%s' "$rs_processes" | grep -Fq " $process"'!'
        then
          not_present="$not_present $process"
        fi
    done

    if [ -z "$not_present" ]
    then
        printf 'OK, the following %s processes are present: %s.\n' "$type" "$processes"
        exit "$CODE_OK"
    else
        printf 'WARNING, the following %s processes are not present:%s.\n' "$type" "$not_present"
        exit "$CODE_WARNING"
    fi
else
    printf 'Unexpected output: %s\n' "$output"
    exit "$CODE_UNKNOWN"
fi


