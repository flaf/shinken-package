#!/bin/sh

# Copyright: 2016 Francois Lafont <francois.lafont@ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}
SPECIFIC_SHORT_OPTIONS=''
SPECIFIC_LONG_OPTIONS='name:,period:,gap:'
SPECIFIC_SYNOPSIS='--name <cron-name> --period "<period>" [ --gap <gap> ]'

GET_SPECIFIC_OPTIONS () {

    case "$1" in

        --name)
            name="$2"
            return 2
        ;;

        --period)
            period="$2"
            return 2
        ;;

        --gap)
            gap="$2"
            return 2
        ;;

    esac

    return 0
}

period2second () {
    local period="$1"
    local sum=0
    local n unit

    for i in $period
    do
        if printf '%s\n' "$i" | grep -Eq '^[0-9]+(d|h|m)$'
        then
            n="${i%[dhm]}"
            unit="${i##*[0-9]}"
            case "$unit" in
                d)
                    sum=$(( sum + (n * 86400 ) )) # 1 day    = 86400s
                ;;
                h)
                    sum=$(( sum + (n *  3600 ) )) # 1 hour   =  3600s
                ;;
                m)
                    sum=$(( sum + (n *    60 ) )) # 1 minute =    60s
                ;;
            esac
        else
            echo "bad argument"
            return 1
        fi
    done

    printf '%s\n' "$sum"
    return 0
}

# Takes one integer as argument which represents seconds and
# displays an equivalent human readable time (ex: 5d 5h 3min 25s).
htime() {

  local T="$1"
  local D=$(( T / 86400     )) # T / 60 / 60 / 24
  local H=$(( T / 3600  %24 ))
  local M=$(( T / 60    %60 ))
  local S=$(( T         %60 ))

  result=$([ "$D" -gt 0 ] && printf '%dd ' "$D"
           [ "$H" -gt 0 ] && printf '%dh ' "$H"
           [ "$M" -gt 0 ] && printf '%dmin ' "$M"
           [ "$S" -gt 0 ] && printf '%ds ' "$S")

  # Remove trailing spaces.
  result="${result% *}"
  printf '%s' "$result"

}

. "$SCRIPT_DIRECTORY/share/snmp.sh"


if [ -z "$name" ] || [ -z "$period" ]
then
    printf 'Sorry, you have to set the --name and --period options.\n' >&2
    exit "$CODE_UNKNOWN"
fi

if [ -z "$gap" ]
then
    gap='10%'
fi


# First checks of the option values.
if ! printf '%s\n' "$name" | grep -qE '^[-_0-9a-z]+$'
then
    printf 'Sorry, in the value of the --name option only minus,' >&2
    printf ' underscore, 0-9 and a-z characters are allowed.\n'   >&2
    exit "$CODE_UNKNOWN"
fi

if ! printf '%s\n' "$period" | grep -qE '^[ 0-9dhm]+$'
then
    printf 'Sorry, in the value of the --period option, only space,' >&2
    printf ' 0-9, d, h, and m characters are allowed.\n'             >&2
    exit "$CODE_UNKNOWN"
fi

if ! printf '%s\n' "$gap" | grep -qE '^[ 0-9dhm%]+$'
then
    printf 'Sorry, in the value of the --gap option, only space,' >&2
    printf ' 0-9, d, h, m and %% characters are allowed.\n'       >&2
    exit "$CODE_UNKNOWN"
fi

# Get the period in seconds.
period_ori="$period"
if ! period=$(period2second "$period")
then
    printf 'Sorry, the value of the --period option has a bad' >&2
    printf ' syntax.\n'                                        >&2
    exit "$CODE_UNKNOWN"
fi

# Get the gap in seconds.
gap_ori="$gap"
if printf '%s\n' "$gap" | grep -qE '^[0-9]+%$'
then
    percent="${gap%?}" # normally ${gap%\%} is possible too.
    gap=$(( (period * percent) / 100 ))
elif gap=$(period2second "$gap")
then
    # Nothing to do, gap is already set in seconds.
    true
else
    printf 'Sorry, the value of the --gap option has a bad' >&2
    printf ' syntax.\n'                                     >&2
    exit "$CODE_UNKNOWN"
fi

threshold=$(( period + gap ))

# The oid 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_cron_status"' in text format.
oid='.1.3.6.1.4.1.8072.1.3.2.3.1.2.15.103.101.116.95.99.114.111.110.95.115.116.97.116.117.115'

# Getting of the ceph status.
output=$(snmpget $SNMP_CMD_OPTIONS -OvQ "$HOSTNAME" "$oid" 2>&1)

# Remove leading double quotes.
output="${output#\"}"
output="${output%\"}"

if [ -z "$output" ]
then
    good_output='false'
elif printf '%s' "$output" | grep -ivqE '^[-_0-9a-z]+;[0-9]+;[0-9]+$'
then
    # There is a line, at least, which doesn't match with the pattern.
    good_output='false'
else
    # All lines of the output are OK.
    good_output='true'
fi


if "$good_output"
then

    # The command substitution removes automatically all trailing
    # newline characters.
    n=$(printf '%s' "$output" | grep -c "^$name;")

    if [ "$n" = 1 ]
    then

        line=$(printf '%s' "$output" | grep "^$name;")
        tmp="${line#*;}" # remains <exit-code>;<timestamp>
        timestamp="${tmp#*;}"
        exit_code="${tmp%;*}"

        if [ "$exit_code" = 0 ]
        then
            now=$(date "+%s")
            since_last_cron=$(( now - timestamp ))
            h_since_last_cron=$(htime "$since_last_cron")
            if [ "$since_last_cron" -gt "$threshold" ]
            then
                printf 'Cron %s WARNING: exit code OK but last execution too old' "$name"
                printf ' (last execution %s ago and the period is' "$h_since_last_cron"
                printf ' %s with gap = %s).\n' "$period_ori" "$gap_ori"
                exit "$CODE_WARNING"
            else
                printf 'Cron %s OK: exit code OK and last execution not too old' "$name"
                printf ' (last execution %s ago and the period is' "$h_since_last_cron"
                printf ' %s with gap = %s).\n' "$period_ori" "$gap_ori"
                exit "$CODE_OK"
            fi

        else
            printf 'Cron %s CRITICAL: exit code is non-zero (%s).\n' "$name" "$exit_code"
            exit "$CODE_CRITICAL"
        fi

    elif [ "$n" = 0 ]
    then
        printf 'Cron %s UNKNOWN: not available status.\n' "$name"
        exit "$CODE_UNKNOWN"
    else
        printf 'The snmp request gives multiple crons with the same name %s.\n' "$name"
        exit "$CODE_UNKNOWN"
    fi


else

    # The output is not valid.
    output=$(printf '%s' "$output" | tr '\n' ' ')
    printf 'Unexpected output: %s\n' "$output"
    exit "$CODE_UNKNOWN"

fi


