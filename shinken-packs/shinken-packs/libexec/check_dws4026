#!/bin/bash
# check_dws426 via snmp for shinken
# 2015-01-15 Create script
# -----------------------------------------------
# check status of Dlink DWS 4024 
#
# Use SNMP V2
# -----------------------------------------------

SNMPWALK=$(which snmpwalk)
SNMPGET=$(which snmpget)
SNMPTABLE=$(which snmptable) 

option_found=0
healthStatus=0
healthString=""

#configuration
expectedAccessPoints="16"
warningClients=21
criticalClients=30

#OID declarations
OID_wsTotalAPs=".1.3.6.1.4.1.171.10.73.50.34.1.12.5.0"
OID_wsTotalManagedAPs=".1.3.6.1.4.1.171.10.73.50.34.1.12.6.0" 
OID_wsTotalClients=".1.3.6.1.4.1.171.10.73.50.34.1.12.13.0"
OID_wsWLANUtilization=".1.3.6.1.4.1.171.10.73.50.34.1.12.16.0"

OID_wsManagedAPIpAddress=".1.3.6.1.4.1.171.10.73.50.34.6.1.1.2"
OID_wsManagedAPStatus=".1.3.6.1.4.1.171.10.73.50.34.6.1.1.9"
OID_wsManagedAPLocation=".1.3.6.1.4.1.171.10.73.50.34.6.1.1.16"

OID_wsManagedAPRadioMacAddress=".1.3.6.1.4.1.171.10.73.50.34.6.4.1.2"
OID_wsManagedAPRadioAuthenticatedClients=".1.3.6.1.4.1.171.10.73.50.34.6.4.1.5"
OID_wsManagedAPRadioWLANUtilization=".1.3.6.1.4.1.171.10.73.50.34.6.4.1.6"

usage()
{
    echo "usage: ./check_dws4026 -c [community] -H [hostname] -s [ap|clients]"
    echo ""
    exit 3
}

    
while getopts c:H:s: OPTNAME; do
    case "$OPTNAME" in
    c)
        SNMPCOMMUNITY="$OPTARG"
        option_found=1
        ;;
    H)
        HOSTNAME="$OPTARG"
        option_found=1
        ;;
    s)
        SCRIPT="$OPTARG"
        option_found=1
        ;;
    *)
        usage
        ;;
    esac
done
 
if [ "$option_found" = "0" ] || [ "$HOSTNAME" = "" ] || [ "$SCRIPT" = "" ] ; then
    usage
else
    case "$SCRIPT" in
    ap)
        wsAP=`$SNMPGET -OQne -t 10 -v2c -c$SNMPCOMMUNITY $HOSTNAME $OID_wsTotalAPs $OID_wsTotalManagedAPs $OID_wsTotalClients $OID_wsWLANUtilization 2> /dev/null`
        
        totalAPs=$(echo "$wsAP" | grep $OID_wsTotalAPs | cut -d"=" -f2 | cut -d" " -f2)
        totalManagedAPs=$(echo "$wsAP" | grep $OID_wsTotalManagedAPs | cut -d"=" -f2 | cut -d" " -f2)
        totalClients=$(echo "$wsAP" | grep $OID_wsTotalClients | cut -d"=" -f2 | cut -d" " -f2)
        WLANUtilization=$(echo "$wsAP" | grep $OID_wsWLANUtilization | cut -d"=" -f2 | cut -d" " -f2)

        perfData="Total-Clients=$totalClients"

        healthString="Total Access Points = $totalAPs, Managed Access Points = $totalManagedAPs, Total clients : $totalClients, WLAN Utilization : $WLANUtilization%."

        if [[ "$totalAPs" -eq "$expectedAccessPoints" ]] && [[ "$totalManagedAPs" -eq "$expectedAccessPoints" ]]; then
            echo "$healthString | $perfData"
            exit 0
        else
            echo "CRITICAL - $healthString | $perfData"
            exit 2
        fi

        ;;
    clients)
        OID_managedAPs=`$SNMPWALK -OQne -t 10 -v2c -c$SNMPCOMMUNITY $HOSTNAME $OID_wsManagedAPIpAddress 2> /dev/null`
        nbManagedAP=$(echo "$OID_managedAPs" | wc -l)
        healthString=""
        perfData=""
        for i in `seq 1 $nbManagedAP`;
        do
            endOID_managedAP=$(echo "$OID_managedAPs" | sed 's/\.1\.3\.6\.1\.4\.1\.171\.10\.73\.50\.34\.6\.1\.1\.2\.//g' | head -n$i | tail -n1 | cut -d"=" -f1 | cut -d" " -f1)

            OIDS_managedAP="$OID_wsManagedAPLocation.$endOID_managedAP $OID_wsManagedAPRadioAuthenticatedClients.$endOID_managedAP.1 $OID_wsManagedAPRadioAuthenticatedClients.$endOID_managedAP.2"

            managedAP=`$SNMPGET -OQne -t 10 -v2c -c$SNMPCOMMUNITY $HOSTNAME $OIDS_managedAP 2> /dev/null`

            APLocation=$(echo "$managedAP" | grep $OID_wsManagedAPLocation.$endOID_managedAP | cut -d"=" -f2 | cut -d" " -f2-4)
            APClients1=$(echo "$managedAP" | grep "$OID_wsManagedAPRadioAuthenticatedClients.$endOID_managedAP.1" | cut -d"=" -f2 | cut -d" " -f2)
            APClients2=$(echo "$managedAP" | grep $OID_wsManagedAPRadioAuthenticatedClients.$endOID_managedAP.2 | cut -d"=" -f2 | cut -d" " -f2)
            
            APL=$(echo $APLocation | sed 's/\ /-/g' | sed 's/\"//g')
            perfData="$perfData; $APL""_1=$APClients1;$warningClients;$criticalClients $APL""_2=$APClients2;$warningClients;$criticalClients"
            if [ "$APClients1" -gt "$criticalClients" ] || [ "$APClients2" -gt "$criticalClients" ]; then
                healthStatus=2
                healthString="$healthString $APLocation (5GHz : $APClients1 clients ; 2.4Ghz : $APClients2 clients),"                 
            elif [ "$APClients1" -gt "$warningClients" ] || [ "$APClients2" -gt "$warningClients" ]; then
                if [ "$healthStatus" != 2 ]; then healthStatus=3; fi
                healthString="$healthString $APLocation (5GHz : $APClients1 clients ; 2.4Ghz : $APClients2 clients),"
            fi
        done

        perfData=$(echo "$perfData" | sed 's/^\;\ //g')

        if [ "$healthStatus" = "3" ] ; then
            echo "WARNING -$healthString | $perfData;"
            exit 1
        elif [ "$healthStatus" = "2" ] ; then
            echo "CRITICAL -$healthString | $perfData;"
            exit 2
        else
            echo "Nb Clients / AP < $warningClients | $perfData;"
            exit 0
        fi
        ;;
    esac
fi


