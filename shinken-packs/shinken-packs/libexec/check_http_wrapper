#!/bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@crdp.ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

export LC_ALL=C
SCRIPT_NAME=${0##*/}
CRITICAL=2
UNKNOWN=3
OPTIONS_LIST="ssl,ip-address:,url:,regex:,warning:,critical:,timeout:,plugin-http:,certificate:,onredirect:,case-insensitive,invert-regex,no-dns-check"

if ! TEMP=$(getopt -o "i,v" -l "$OPTIONS_LIST" -n "$SCRIPT_NAME" -- "$@")
then
    echo "Syntax error with $SCRIPT_NAME command."
    exit 3
fi

eval set -- "$TEMP"
unset TEMP

# Default values of some options.
warning="3"
critical="7"
timeout="10"
plugin_http="/usr/lib/nagios/plugins/check_http"
onredirect="follow"
case_insensitive=false
invert_regex=false
dns_check=true

while true
do
    case "$1" in

        --ssl)
            ssl="--ssl"
            shift 1
        ;;

        --ip-address)
            ip_address="$2"
            shift 2
        ;;

        --url)
            url="$2"

            cleaned_url="${url#url->}"
            if [ "$url" = "$cleaned_url" ]
            then
                ignore_ip_address=false
            else
                ignore_ip_address=true
            fi

            # Split cleaned_url to have <host>:<port>:<path>
            array=$(echo "$cleaned_url" | sed -nr 's;^([-a-zA-Z0-9_.]+)(:([0-9]+))?(/.*)?$;\1:\3:\4;p')

            if [ -z "$array" ]
            then
                echo "Bad syntax in the url."
                exit "$UNKNOWN"
            fi

            #host=$(echo "$array" | cut -d':' -f 1)
            #port=$(echo "$array" | cut -d':' -f 2)
            #path=$(echo "$array" | cut -d':' -f 3)

            # Better perf without cut.
            host="${array%%:*}"
            temp_var="${array#*:}"
            port="${temp_var%:*}"
            path="${temp_var#*:}"
            #printf -- "[$host] [$port] [$path]\n"

            shift 2
        ;;

        --regex)
            regex="$2"
            shift 2
        ;;

        --warning)
            warning="$2"
            shift 2
        ;;

        --critical)
            critical="$2"
            shift 2
        ;;

        --timeout)
            timeout="$2"
            shift 2
        ;;

        --plugin-http)
            plugin_http="$2"
            shift 2
        ;;

        --certificate)
            certificate="$2"
            ssl="--ssl" # The --ssl option is automatically enabled in this case.
            shift 2
        ;;

        --onredirect)
            onredirect="$2"
            shift 2
        ;;

        --case-insensitive|-i)
            case_insensitive="true"
            shift 1
        ;;

        --invert-regex|-v)
            invert_regex="true"
            shift 1
        ;;

        --no-dns-check)
            dns_check="false"
            shift 1
        ;;

        --)
            shift 1
            break
        ;;

    esac
done

# The --url option is mandatory.
if [ -z "$url" ]
then
    echo "Sorry, the --url option is mandatory."
    exit "$UNKNOWN"
fi

if [ -z "$ssl" ]
then
    # No ssl so, it's http.
    full_url="http://$cleaned_url"
else
    full_url="https://$cleaned_url"
fi

# Default value of port if the variable is empty.
if [ -z "$port" ]
then
    if [ -z "$ssl" ]
    then
        # If no ssl, 80 is the default port.
        port='80'
    else
        port='443'
    fi
fi

# Default value of ip_address if the variable is empty or if
# ignore_ip_address is true.
if [ -z "$ip_address" ] || "$ignore_ip_address"
then
    ip_address="$host"
else
    # $ip_address is not empty _and_ $ignore_ip_address is false.
    # In this case, we want to test if $host is resolved to the
    # IP address unless the --no-dns-check is set.
    if "$dns_check"
    then
        # Of course, the DNS check is relevant and is made
        # only if $ip_address is an IP and if $host is not
        # an IP.
        if ipcalc --nocolor --nobinary "$ip_address" 2>&1 | grep -qF 'INVALID ADDRESS'
        then
            ip_address_is_ip=false
        else
            ip_address_is_ip=true
        fi
        if ipcalc --nocolor --nobinary "$host" 2>&1 | grep -qF 'INVALID ADDRESS'
        then
            host_is_not_ip=true
        else
            host_is_not_ip=false
        fi
        if "$ip_address_is_ip" && "$host_is_not_ip"
        then
            dns_ko=true
            for l in $(dig "$host" +short 2>/dev/null)
            do
                # We remove the potential trailing dot characters
                # (for instance with CNAME records, the fqdns printed
                # by dig have a trailing dot character).
                l="${l%.}"
                if [ "$l" = "$ip_address" ]
                then
                    dns_ko=false
                    break
                fi
            done
            if "$dns_ko"
            then
                printf "Url: %s . The hostname %s is not resolved to the IP %s.\n" "$full_url" "$host" "$ip_address"
                exit "$CRITICAL"
            fi
        fi
    fi
fi

# The first %s is the checked url and the second %s is the output
# of the `check_http` nagios plugin.
OUTPUT_PATTERN='Url: %s . %s'

# With this specific value, we use the patched version of check_http.
if [ "$onredirect" = 'followcookie' ]
then
    plugin_http='/usr/share/shinken-packs/libexec/check_http_cookie'
    onredirect='follow'
fi

# Case when we just want to check the certificate.
if [ -n "$certificate" ]
then
    # The --sni option enables "SSL/TLS hostname extension support"
    # which allows to check the certificate according to the vhost.
    output=$("$plugin_http" "$ssl" -4 -I "$ip_address" -H "$host" \
              --sni -p "$port" -C "$certificate"                  \
              --timeout="$timeout"); exit_code="$?"
    printf "$OUTPUT_PATTERN" "$full_url" "$output"
    exit "$exit_code"
fi

# Default value of path if the variable is empty.
if [ -z "$path" ]
then
    path='/'
fi

# In the code below:
#   - '-I' option is the address (IP or fqdn) of the destination server
#   - '-H' option is the host header in the http[s] request, ie the
#     requested virtual host.
#
# We add the option --header 'Accept-Encoding: identity' to
# force the server to delivery html as text and not as gzip
# etc.
#
if [ -z "$regex" ]
then
    output=$("$plugin_http" "$ssl" -4 -I "$ip_address" -H "$host" -u "$path" \
             -p "$port" -w "$warning" -c "$critical" --timeout="$timeout"    \
             --onredirect="$onredirect" --header 'Accept-Encoding: identity' \
             "$@" 2>&1); exit_code="$?"
    printf "$OUTPUT_PATTERN" "$full_url" "$output"
    exit "$exit_code"
else
    # There is a regex.

    if "$case_insensitive"
    then
        opt_regex='--eregi' # option for the regex case INsensitive.
        flag='case-insensitive'
    else
        opt_regex='--ereg'  # option for the regex case sensitive.
        flag='case-sensitive'
    fi

    if "$invert_regex"
    then
        opt_invert_regex='--invert-regex'
        msg='CONTAINS'
    else
        opt_invert_regex=''
        msg='does NOT contain'
    fi

    # If the exit code is not OK and if the pattern is not found,
    # there is a specific output.
    output=$("$plugin_http" "$ssl" -4 -I "$ip_address" -H "$host" -u "$path" \
             -p "$port" -w "$warning" -c "$critical" --timeout="$timeout"    \
             --onredirect="$onredirect" --header 'Accept-Encoding: identity' \
             "$opt_regex" "$regex" "$opt_invert_regex"                       \
             "$@" 2>&1); exit_code="$?"

    if [ "$exit_code" = "0" ]
    then
        printf "$OUTPUT_PATTERN" "$full_url" "$output"
        exit "$exit_code"
    fi

    if echo "$output" | grep -Eq 'pattern( not)? found'
    then
        perfdata=$(echo "$output" | sed -r "s/^.*\|(.*)$/\1/")

        if echo "$regex" | grep -Eq '\|'
        then
            # The regex contains "|" so impossible to put it
            # in the output because of a conflict with perfdata.
            output="Response from host which $msg the $flag pattern. |$perfdata"
        else
            output="Response from host which $msg this $flag pattern: $regex |$perfdata"
        fi
    fi

    printf "$OUTPUT_PATTERN" "$full_url" "$output"
    exit "$exit_code"

fi


