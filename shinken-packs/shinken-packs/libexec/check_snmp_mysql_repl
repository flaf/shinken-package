#!/bin/sh

# Copyright: 2014 Francois Lafont <francois.lafont@crdp.ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#set -x
SCRIPT_NAME=${0##*/}
SCRIPT_DIRECTORY=${0%/*}

. "$SCRIPT_DIRECTORY/share/check_snmp_header"

SECONDS_THRESHOLD="$seconds_behind_master" # get from an option.
OID='NET-SNMP-EXTEND-MIB::nsExtendOutputFull."get_mysql_repl_status"'

# Getting of the output.
if output=$(snmpget -OvQ -r "$retry" -t "$timeout" $AUTH_OPTIONS "$host" $OID 2>&1)
then

    # We must delete ' and " characters to avoid errors during notification.
    slave_io_state=$(echo "$output" | sed -n 's/^slave_io_state://p' | tr -d "'\"")
    slave_io_running=$(echo "$output" | sed -n 's/^slave_io_running://p' | tr -d "'\"")
    slave_sql_running=$(echo "$output" | sed -n 's/^slave_sql_running://p' | tr -d "'\"")
    last_error=$(echo "$output" | sed -n 's/^last_error://p' | tr -d "'\"")
    seconds_behind_master=$(echo "$output" | sed -n 's/^seconds_behind_master://p' | tr -d "'\"")

    # last_error can be verbose.
    if [ -n "$last_error" ]
    then
        last_error="non-empty"
    fi

    warning=false
    critical=false
    info="slave_io_state=$slave_io_state, slave_io_running=$slave_io_running, slave_sql_running=$slave_sql_running"
    info="$info, last_error=$last_error, seconds_behind_master=$seconds_behind_master"

    if [ "$slave_io_state" != "waiting for master to send event" ]
    then
        warning=true
        info=$(echo "$info" | sed 's/slave_io_state=/SLAVE_IO_STATE=/')
    fi

    if [ "$slave_io_running" != 'yes' ]
    then
        critical=true
        info=$(echo "$info" | sed 's/slave_io_running=/SLAVE_IO_RUNNING=/')
    fi

    if [ "$slave_sql_running" != 'yes' ]
    then
        critical=true
        info=$(echo "$info" | sed 's/slave_sql_running=/SLAVE_SQL_RUNNING=/')
    fi

    if [ -n "$last_error" ]
    then
        warning=true
        info=$(echo "$info" | sed 's/last_error=/LAST_ERROR=/')
    fi

    # seconds_bebind_master must be an integer.
    if ! echo "$seconds_behind_master" | grep -Eq '^[0-9]+$'
    then
        warning=true
        info=$(echo "$info" | sed 's/seconds_behind_master=/SECOND_BEHIND_MASTER=/')
    else
        # Compare only if seconds_behind_master is an interger
        if [ "$seconds_behind_master" -gt "$SECONDS_THRESHOLD" ]
        then
            warning=true
            info=$(echo "$info" | sed 's/seconds_behind_master=/SECOND_BEHIND_MASTER=/')
            info="$info > $SECONDS_THRESHOLD"
        fi
    fi

    if "$critical"
    then
        echo "MySQL replication problem: $info."
        exit "$CRITICAL"
    fi

    if "$warning"
    then
        echo "MySQL replication problem: $info."
        exit "$WARNING"
    fi

    echo "MySQL replication OK: $info."
    exit "$OK"

else

    # The "snmpget" command hasn't succeeded.
    echo "$output"
    exit "$UNKNOWN"

fi


