#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: 2014 Francois Lafont <francois.lafont@ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import os
from spnotify import *

os.environ['PATH'] = '/bin:/usr/bin'

# Do not set this environment variable.
# This script will use the locale of the calling program.
#os.environ['LC_ALL'] = 'C'

PROG = os.path.basename(sys.argv[0])

########################################################
### Required and common options in the common_parser ###
########################################################

# Remove of the help option to avoid conflict during
# the inheritance.
common_parser = argparse.ArgumentParser(add_help=False)

common_options = [
  # [
  #  '--long-opt', '-L', type, is_required,
  #  dest,
  #  metavar,
  #  help,
  # ],
  [
   '--print-only', '--PO', bool, False,
   'print_only',
   '',
   "The program does't send any message and just prints the " \
   'message on stdout.',
  ],
  [
   '--contact-name', '-C', str, True,
   'contact_name',
   'CONTACT-NAME',
   'The shinken name of the contact.',
  ],
  [
   '--black-list', '--BL', str, False,
   'black_list',
   'BLACK-LIST-FILE',
   'The file name used as a black list.',
  ],
  [
   '--host-name', '-H', str, True,
   'host_name',
   'HOST-NAME',
   'The shinken host name.',
  ],
  [
   '--host-address', '-I', str, True,
   'host_address',
   'HOST-ADDRESS',
   'The shinken host address.',
  ],
  [
   '--service-description', '-S', str, False,
   'service_description',
   'SERVICE-DESCRIPTION',
   'The description of the service, not required for a host notification.',
  ],
  [
   '--notification-type', '-T', str, True,
   'notification_type',
   'NOTIFICATION-TYPE',
   'The type of the notification (PROBLEM, RECOVERY etc).',
  ],
  [
   '--state', '--ST', str, True,
   'state',
   'STATE',
   'The state of the check (CRITICAL, WARNING etc).',
  ],
  [
   '--business-impact', '-B', int, True,
   'business_impact',
   'BUSINESS-IMPACT',
   'The business impact of the check.',
  ],
  [
   '--additional-info', '-A', str, True,
   'additional_info',
   'ADDITIONAL-INFO',
   'The additional information of the check.',
  ],
  [
   '--notification-number', '-N', int, True,
   'notification_number',
   'NOTIFICATION-NUMBER',
   'The number of consecutive notifications.',
  ],
  [
   '--rarefaction-threshold', '-R', int, True,
   'rarefaction_threshold',
   'RAREFACTION-THRESHOLD',
   'As soon as the notication number ' \
   'N >= RAREFACTION-THRESHOLD, the notification is sent only if ' \
   'N = 0 (mod 10). RAREFACTION-THRESHOLD = 0 is equivalent to ' \
   'RAREFACTION-THRESHOLD = infinity.',
  ],
  [
   '--sms-threshold', '--SMS-THR', int, True,
   'sms_threshold',
   'SMS-THRESHOLD',
   'Send SMS (in addition to send an e-mail) ' \
   'only if business impact >= SMS-THRESHOLD.',
  ],
  [
   '--sms-url', '--SMS-URL', str, True,
   'sms_url',
   'SMS-URL',
   'The url to send SMS with "phone" and "msg" POST variables.',
  ],
  [
   '--contact-number', '--NUMBER', str, True,
   'contact_number',
   'CONTACT_NUMBER',
   "Phone number of the contact. If CONTACT-NUMBER doesn't match " \
   'with /^[0-9]+$/, no SMS is sent.',
  ],
]

for l in common_options:
    long_option = l[0]
    short_option = l[1]
    option_type = l[2]
    is_required = l[3]
    dest = l[4]
    metavar = l[5]
    option_help = l[6]
    if option_type == bool:
        # For a boolean option which is not required (ex: --print-only).
        common_parser.add_argument(short_option, long_option,
                                   action="store_true",
                                   help=option_help,
                                   dest=dest)
    else:
        common_parser.add_argument(
            short_option, long_option,
            required=is_required,
            nargs=None, # default value, exactly one argument is experted
            action='store',
            dest=dest,
            type=option_type,
            metavar=metavar,
            help=option_help,
        )


########################
### The main parser ####
########################

description = 'Send shinken notifications either with the mail command ' \
              'or by writing in a file (by example in a pipe file). ' \
              'Precondition, the system must be configured in ' \
              'order to send mails. If an option value begins with ' \
              "the dash character (-), you must use --xxx='-value' " \
              "or -X='-value' or -X'-value'."

epilog = 'For each subcommand, run "%s <subcommand> -h" to ' \
         'have some help.' % (PROG,)

parser = argparse.ArgumentParser(description=description, epilog=epilog)


#########################################################
### The subparsers parser_by_email and parser_by_file ###
#########################################################

help_message = 'Subcommand which gives the method used ' \
               'for sending the notification.'
subparsers = parser.add_subparsers(
    help=help_message,
    title='Subcommands',
    dest='subcommand',
)

help_message = 'Send the notification by email.'
parser_by_email = subparsers.add_parser(
    'by-email',
    help=help_message,
    parents=[common_parser],
)

help_message = 'Send the notification by writing in a file.'
parser_by_file = subparsers.add_parser(
    'by-file',
    help=help_message,
    parents=[common_parser],
)


##############################################
### Additional options for parser_by_email ###
##############################################

parser_by_email.add_argument(
    '--email', '--contact-email',
    required=True,
    nargs=None,
    action='store',
    dest='contact_email',
    type=str,
    metavar='CONTACT-EMAIL',
    help='E-mail of the contact.',
)


#############################################
### Additional options for parser_by_file ###
#############################################

parser_by_file.add_argument(
    '--file-name',
    required=True,
    nargs=None,
    action='store',
    dest='file_name',
    type=str,
    metavar='FILE-NAME',
    help='The file name (a priori a pipe file).',
)


###################################
### Parsing of the command line ###
###################################

args = parser.parse_args()
opt_dict = vars(args)

# Decode argv in unicode.
encoding = sys.getfilesystemencoding()
for key in opt_dict:
    if isinstance(opt_dict[key], str):
        opt_dict[key] = opt_dict[key].decode(encoding)


#############################################
### Sending of the notification... or not ###
#############################################

logger = Logger()

if opt_dict['subcommand'] == 'by-email':
    # If "by-email", there is no --file-name option.
    opt_dict['file_name'] = None
elif opt_dict['subcommand'] == 'by-file':
    # If "by-file", there is no --contact_email option.
    opt_dict['contact_email'] = None
else:
    pass

if opt_dict['service_description']:
    Notif = ServiceNotification
else:
    Notif = HostNotification

contact = Contact(
    name                  = opt_dict['contact_name'],
    sms_threshold         = opt_dict['sms_threshold'],
    rarefaction_threshold = opt_dict['rarefaction_threshold'],
    email                 = opt_dict['contact_email'],
    phone_number          = opt_dict['contact_number'])

notification = Notif(
    contact         = contact,
    hostname        = opt_dict['host_name'],
    address         = opt_dict['host_address'],
    ntype           = opt_dict['notification_type'],
    state           = opt_dict['state'],
    business_impact = opt_dict['business_impact'],
    additional_info = opt_dict['additional_info'],
    number          = opt_dict['notification_number'],
    service_desc    = opt_dict['service_description'],
    file_name       = opt_dict['file_name'])

if notification.in_rarefaction_range():
    logger.write(u"No notification because rarefaction: " + str(notification))
    sys.exit(0)

if opt_dict['black_list']:
    try:
        f = open(opt_dict['black_list'], 'r')
        for line in f:
            line = line.strip().decode('utf-8')
            rule = Line(line).get_rule()
            if rule:
                if rule.is_matching_with(notification):
                    f.close()
                    logger.write(u'No notification because matching rule' \
                                 u'( %s ): ' %(line,) + str(notification))
                    sys.exit(0)
    except Exception as ex:
        if 'f' in globals(): f.close()
        msg = u'Problem with the black list file (%s). Reading the black ' \
              u'list is skipped... %s' % (opt_dict['black_list'], str(ex))
        logger.write(msg)

if opt_dict['print_only']:
    print(notification.get_subject())
    print(notification.get_message())
else:
    notification.send()


