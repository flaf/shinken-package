define host {

    name http_tpl
    use generic-host_tpl
    register 0

    # The response time of the request.
    _HTTP_WARN 4
    _HTTP_CRIT 8

    # By default, the service description is "http". The
    # service checks http://$HOSTADDRESS$ by default (if
    # you want to use a specific port, put it in the url 
    # like in "$HOSTADDRESS$:8080").
    #
    # By default, no regex are tested (ie the regex is empty).
    # The key below is a multivalue key with these forms:
    #
    #   <service description>$(<url>)$                                      ; no regex
    #   <service description>$(<url>)$ $(<regex>)$                          ; with regex
    #   <service description>$(<url>)$ $(<regex>)$ $(<additional-options>)$ ; regex and additional options
    #
    # <additional-options> can be empty ("") or a combination
    # of these options:
    #       * -i (regex case insensitive),
    #       * -v (inverse regex),
    #       * --no-dns-check (not check if the hotname is resolved to the IP address),
    #       * and specific options from the nagios
    #         check_http plugin, but must be put
    #         after "--". For instance:
    #               -i -v -- --useragent "Mozilla"
    #
    # No "http" (or "https") substring in <url>.
    # <url> can be equal to: "url-><url>". In this case,
    # the host address is not used, just the url is used.
    # Without "url->", the http request is sent to the
    # address $HOSTADDRESS$.
    #
    #   Reminders about the check_http nagios plugin
    #
    #       - The --IP-address option is the address
    #         used to request the host. If it's an IP
    #         there is no DNS resolution during the check,
    #         if not there is DNS resolution.
    #
    #       - The -H option is the "Host:" header in
    #         the http request.
    #
    #   Slogans:
    #
    #       * With "url->", I don't care about the $HOSTADDRESS$ value,
    #         there will be probably a DNS resolution during the execution
    #         of the check_http nagios plugin.
    #
    #       * Without "url->", I'm concerned about the $HOSTADDRESS$ value:
    #           - Test if the fdqn in the url is resolved to $HOSTADDRESS$
    #             unless the --no-dns-check option is set.
    #           - During the execution of the check_http nagios plugin
    #             there is no DNS resolution because $HOSTADDRESS$ is
    #             used as --IP-address option.
    #
    #   Precisely (the regex can be empty here, in this case no regex is checked):
    #
    #       - with service-descr$(xxx/aa/bb)$ $(regex)$
    #
    #           a) The check tests if "xxx" is resolved to $HOSTADDRESS$
    #              only if (i) $HOSTADDRESS$ is an IP address and if (ii)"xxx"
    #              is NOT an IP address. If (i) or (ii) are false, this
    #              step a) is skipped.
    #           b) Then the check_http nagios plugin is launched with:
    #                * --IP-address equal to $HOSTADDRESS$, so there is no DNS
    #                  resolution during this step b) unless $HOSTADDRESS$ is
    #                  not an IP but a fqdn.
    #                * -H is equal to "xxx" ie the "Host:" header is set to "xxx".
    #
    #       - with service-descr$(xxx/aa/bb)$ $(regex)$ $(--no-dns-check)$
    #
    #           a) No DNS resolution is made before the launch of the check_http
    #              nagios plugin in any case.
    #           b) Then the check_http nagios plugin is launched with:
    #                * --IP-address equal to $HOSTADDRESS$, so there is no DNS
    #                  resolution during this step b) unless $HOSTADDRESS$ is
    #                  not an IP but a fqdn.
    #                * -H is equal to "xxx" ie the "Host:" header is set to "xxx".
    #
    #       - with service-descr$(url->xxx/aa/bb)$ $(regex)$
    #
    #           a) No DNS resolution is made before the launch of the check_http
    #              nagios plugin in any case. So with "url->" the --no-dns-check
    #              is implicit.
    #           b) Then the check_http nagios plugin is launched with:
    #                * --IP-address equal to "xxx", so there is DNS
    #                  resolution during this step b) unless "xxx" is already
    #                  an IP address.
    #                * -H is equal to "xxx" ie the "Host:" header is set to "xxx".
    #
    # No simple quote (') in the regex.
    # If you want to put a dollar ($) in the regex, you must
    # put 2 consecutive dollars ($$).
    #
    # By default, no regex and no additional options.
    _http_pages http$($HOSTADDRESS$)$,

    # Exactly the same service as above but with more
    # frequent checks and an immediate notification when no
    # OK.
    #
    ;_sensitive_http_pages sensitive http$($HOSTADDRESS$)$ $()$ $()$,

    # You can check if a page is defaced. The syntax is:
    #
    #   <service description>$(<url>)$ $(<additional-options>)$
    #
    # where <url> and <additional-options> have the same
    # syntax as above. It uses a specific and homemade
    # regex. This check is not at all trustwortly at 100% of
    # course.
    #
    ;_http_pages_defaced http-defaced$($HOSTADDRESS$)$ $()$,

    # /!\ WARNING /!\
    # There is difference between
    #
    #       _http_pages http foo $($HOSTADDRESS$)$ $(regex)$
    #
    # and
    #
    #       _http_pages http foo$($HOSTADDRESS$)$ $(regex)$
    #
    # In the first case,  service_description == "http foo "
    # In the second case, service_description == "http foo"

}

# Exactly the same as above except it uses the
# dummy-host_tpl so the syntax for the url must be
# "url->$url".
define host {
    name dummy-http_tpl
    use dummy-host_tpl
    register 0
    _HTTP_WARN 4
    _HTTP_CRIT 8
    ;_http_pages descr$(url->xxx/a/index.php)$ $()$ $()$,
    ;_sensitive_http_pages descr$(url->xxx/a/index.php)$ $()$ $()$,
    ;_http_pages_defaced descr$(url->xxx/a/index.php)$ $()$,
}


define host {

    name https_tpl
    use generic-host_tpl
    register 0

    # The response time of the request.
    _HTTPS_WARN 4
    _HTTPS_CRIT 8

    # If the certificate expires in N day(s) with N =< <threshold>,
    # then there is a WARNING or a CRITICAL.
    _HTTPS_CERT_WARN 30
    _HTTPS_CERT_CRIT 10

    # The key is similar to the key in http_tpl.
    #
    _https_pages https$($HOSTADDRESS$)$,

    # The key is similar to the key in http_tpl.
    #
    ;_sensitive_https_pages sensitive https$($HOSTADDRESS$)$ $()$,

    # The key is similar to the key in http_tpl.
    #
    ;_https_pages_defaced https-defaced$($HOSTADDRESS$)$,
}

# The same as above except it uses the dummy-host_tpl so the
# syntax must be url->$url.
define host {
    name dummy-https_tpl
    use dummy-host_tpl
    register 0
    _HTTPS_WARN 4
    _HTTPS_CRIT 8
    ;_https_pages https$(url->www.foo.tld/index.php)$,
}


