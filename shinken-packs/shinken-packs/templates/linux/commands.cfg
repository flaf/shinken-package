# Commande qui teste le load average de l'hôte.
define command {
    command_name check_linux_load
    # L'option -f rend la sortie de la commande compatible avec Perfparse
    # ce qui peut-être utile avec certains modules de shinken.
    # Avec l'option -T netsl on obtient un load average à la linux
    # (ie de la forme 1 mn,5 mn,15 mn).
    command_line "$PLUGINSDIR$/check_snmp_load.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" \
        -f -w "$_HOSTLOAD_WARN$" -c "$_HOSTLOAD_CRIT$" -T netsl \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande qui va tester le pourcentage de charge CPU.
define command {
    command_name check_linux_cpu
    # Avec "-w 80" par exemple, on aura un warning si le cpu est chargé
    # à plus de 80%.
    command_line "$PLUGINSDIR$/check_snmp_load.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" \
        -f -w "$_HOSTCPU_WARN$" -c "$_HOSTCPU_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


### Ancienne commande qui utilise le check proposé par Shinken, à savoir
### check_snmp_storage.pl. Ce marche marche parfaitement, seulement snmp
### (plus exactement net-snmp 5.4.3 l'implémentation de snmp sur Debian
### Lenny, Squeeze et Wheezy) possède un bug par rapport au stockage.
### Pour des systèmes de fichiers gros (> 2T), la valeur de l'espace
### occupé sur le système de fichiers est fausse (et on peut avoir des
### taux d'occupation incohérent comme 150% par exemple).
### Du coup, on utilisera un autre check qui passera par un extend
### de snmp et ira pendre les informations via la commande df qui, elle,
### ne se trompe pas a priori.
#
# Commande qui teste l'espace disponible sur les partition appartenant
# à des disques locaux.
define command {
    command_name check_linux_disks_old
    # L'option « -m "^/" » signifie qu'on recherche toutes les partitions
    # dont le point de montage commence par / (ie toutes les partitions)
    # L'option -f rend la sortie de la
    # commande compatible avec Perfparse ce qui peut-être utile avec
    # certains modules de shinken. Avec -w 80 on aura un warning dès que
    # plus de 80% d'au moins une partition est occupée. L'option -S1,1
    # permet de mettre en forme la sortie (voir la page d'aide).
    #
    # Avec l'option « --storagetype FixedDisk », on se limite aux partitions
    # situées sur des disques locaux uniquement.
    command_line "$PLUGINSDIR$/check_snmp_storage.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" -m "^/" -f -w "$_HOSTSTORAGE_WARN$" \
        -c "$_HOSTSTORAGE_CRIT$" -S1,1 --storagetype FixedDisk \
        $_HOSTSNMP_AUTH_OPTIONS$
}


define command {
    command_name check_linux_disks
    # Avec --warning 80 on aura un warning dès que
    # plus de 80% d'au moins une partition est occupée.
    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_storage" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTSTORAGE_WARN$" --critical "$_HOSTSTORAGE_CRIT$" \
        --exceptions "$_HOSTSTORAGE_EXCEPTIONS$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande qui va checker la RAM et la swap de l'hôte.
define command {
    command_name check_linux_memory
    # Avec cette commande, par défaut, la mémoire cache n'est pas prise en
    # compte comme mémoire occupée. Aucune raison de le faire mais avec
    # l'option -m on peut prendre en compte la mémoire cache de la RAM
    # comme mémoire occupée. Avec par exemple « -w 90,30 », un warning
    # sera levé si la RAM est occupée à plus de 90% ou si la swap est
    # occupée à plus de 30%. Un seuil à 0 ne lève jamais de warning.
    command_line "$PLUGINSDIR$/check_snmp_mem.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" -f -w "$_HOSTMEMORY_WARN$" -c "$_HOSTMEMORY_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Command to check in/out bandwidth of interfaces.
define command {
    command_name check_linux_network_usage

    # /!\ Warning: the nagios plugin is modified with personal hacks.
    #
    # Explanations about some options:
    #
    # --name: regex to filter interfaces to checks (by the name).
    # --exception: it's a personal hack of the nagios plugin.
    # --perfparse: to have perfparse compatible output.
    # --kbits: make the warning and critical levels in K|M|G Bits/s
    #          instead of K|M|G Bytes/s
    # --mega: make the warning and critical levels in Mbps
    # --perfcheck: check the input/ouput bandwidth of the interface
    # --64bits: use 64 bits counters instead of the standard counters
    #           when checking bandwidth & performance data for
    #           interface >= 1Gbps.
    #           You must use snmp v2c or v3 to get 64 bits counters.
    # --perfoctet: output perf data in bytes.
    # --label: add label before speed in output : in=, out= etc...
    # --pcount: how many sets of previous data to keep as perfdata.
    # --nodelta: don't use this fucking delta. Use direct the
    #            previous perfdata.
    # --warning, --critical: for instance, "-w 300,500" means
    #     threehold of 300 Mbps for in and  500 Mbps for out.
    # --prev_perfdata: the perfdata of the previous check.
    # --descrname_oid: the OID used to get the interface names.
    #                  This option is optional but the default
    #                  OID doesn't work with Debian Jessie.
    #                  The OID below seems work well for any OS.
    #
    # Note: $SERVICEPERFDATA$ can contain simple quotes ('), so the macro
    #       is inside double quotes (").
    command_line '$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_netint.pl' \
                 -H '$HOSTADDRESS$' --timeout '$TIMEOUT$'          \
                 --name '$_HOSTIFNAMES$'                           \
                 --exception '$_HOSTIFNAMES_EXCEPTION$'            \
                 --perfparse --kbits --mega --perfcheck --64bits   \
                 --perfoctet --label --pcount 1 --nodelta          \
                 --warning '$_HOSTNET_WARN$'                       \
                 --critical '$_HOSTNET_CRIT$'                      \
                 --prev_perfdata "$SERVICEPERFDATA$"               \
                 --descrname_oid '$_HOSTNET_OID_DESC$'             \
                 $_HOSTSNMP_AUTH_OPTIONS$
}


# Command to check a list of interfaces which are down.
define command {
    command_name check_linux_ifaces_down

    # /!\ Warning: the nagios plugin is modified with personal hacks.
    #
    # --inverse: return status CRITICAL when UP instead
    # --okifnoiface: return OK if no matching interface is found (hack)
    # --zerothresholds: do not check bandwidth thresholds
    #
    # Explanations about some options:
    command_line '$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_netint.pl' \
                 -H '$HOSTADDRESS$' --timeout '$TIMEOUT$'          \
                 --name '$_HOSTIFNAMES_EXCEPTION$' --label         \
                 --inverse --okifnoiface $_HOSTSNMP_AUTH_OPTIONS$  \
                 --descrname_oid '$_HOSTNET_OID_DESC$'             \
                 --zerothresholds --perfparse
}


# Command wich checks the reboot by comparing the uptime with the
# previous uptime. This check is volatile. But when a host is
# DOWN according to shinken, there no notification. So, with this
# check, it's possible to miss the notification.
define command {
    command_name check_linux_reboot

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_reboot" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}

# Other command to check the reboot, more secure than chech_linux_reboot
# because this check isn't volatile.
define command {
    command_name check_linux_reboot_secure

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_reboot_secure" \
        --host "$HOSTADDRESS$" --warning="$_HOSTREBOOT_WARN$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}

# Commande pour checker la lecture (in) et l'écriture (out) sur la swap en
# kiloBytes/s, moyenne calculée sur la dernière minute précédent la requête.
define command {
    command_name check_linux_swap_io

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_swap_io" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTSWAP_WARN$" --critical "$_HOSTSWAP_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker l'écart de temps entre l'hôte et le serveur shinken.
# C'est l'écart entre les timestamps des deux machines qui est comparé aux
# seuils warning et critical qui sont exprimés en secondes.
define command {
    command_name check_linux_time

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_time" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTTIME_WARN$" --critical "$_HOSTTIME_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le nombre de processus chargés et le nombre de
# processus dans l'état "running".
define command {
    command_name check_linux_processes

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_processes" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTPROCESS_WARN$" --critical "$_HOSTPROCESS_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le changement de certains fichiers sensibles.
# La liste des fichiers est présente en dur dans le script local au nœud
# de supervision qui calcule une empreinte de chacun d'eux.
# Attention, tous ces fichiers ne doivent pas contenir d'espace dans leur nom.
define command {
    command_name check_linux_sensitive_files

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_sensitive_files" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le nom d'hôte d'un nœud de supervision et vérifier
# qu'il est bien identique au nom donné via l'option --hostname.
define command {
    command_name check_linux_hostname

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_hostname" \
        --host "$HOSTADDRESS$" --hostname="$_HOSTREAL_HOSTNAME$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker un éventuel changement de la sortie de « uname -a ».
define command {
    command_name check_linux_uname

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_uname" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker les pourcentages des inodes utilisés sur les disques.
define command {
    command_name check_linux_inodes

    # Par exemple --warning=75 signifie qu'un warning sera levé si au
    # moins un des disques a 75% ou plus d'inodes utilisés.
    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_inodes" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning="$_HOSTINODES_WARN$" --critical="$_HOSTINODES_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check the mountpoints in a host.
define command {
    command_name check_linux_mounts

    command_line '$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_mounts' \
        --host '$HOSTADDRESS$' --timeout '$TIMEOUT$' \
        $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check if non-kernel processes are present.
define command {
    command_name check_present_processes

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_processes2" \
        --host '$HOSTADDRESS$' --timeout "$TIMEOUT$" --processes '$ARG1$' \
        $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check if kernel processes are present.
define command {
    command_name check_present_kprocesses

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_processes2" \
        --host '$HOSTADDRESS$' --timeout "$TIMEOUT$" --processes '$ARG1$' \
        --kernel $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check cron status.
define command {
    command_name check_cron_status

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_cron_status" \
        --host '$HOSTADDRESS$' --timeout "$TIMEOUT$" \
        --name '$ARG1$' --period '$ARG2$' --gap '$ARG3$' \
        $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check if an IP address is defined on the host.
define command {
    command_name check_has_ip_address

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_ip_address" \
        --host '$HOSTADDRESS$' --timeout "$TIMEOUT$" \
        --ip '$ARG1$' $_HOSTSNMP_AUTH_OPTIONS$
}


