# Commande qui teste le load average de l'hôte.
define command {
    command_name check_linux_load
    # L'option -f rend la sortie de la commande compatible avec Perfparse
    # ce qui peut-être utile avec certains modules de shinken.
    # Avec l'option -T netsl on obtient un load average à la linux
    # (ie de la forme 1 mn,5 mn,15 mn).
    command_line "$PLUGINSDIR$/check_snmp_load.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" \
        -f -w "$_HOSTLOAD_WARN$" -c "$_HOSTLOAD_CRIT$" -T netsl \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande qui va tester le pourcentage de charge CPU.
define command {
    command_name check_linux_cpu
    # Avec "-w 80" par exemple, on aura un warning si le cpu est chargé
    # à plus de 80%.
    command_line "$PLUGINSDIR$/check_snmp_load.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" \
        -f -w "$_HOSTCPU_WARN$" -c "$_HOSTCPU_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


### Ancienne commande qui utilise le check proposé par Shinken, à savoir
### check_snmp_storage.pl. Ce marche marche parfaitement, seulement snmp
### (plus exactement net-snmp 5.4.3 l'implémentation de snmp sur Debian
### Lenny, Squeeze et Wheezy) possède un bug par rapport au stockage.
### Pour des systèmes de fichiers gros (> 2T), la valeur de l'espace
### occupé sur le système de fichiers est fausse (et on peut avoir des
### taux d'occupation incohérent comme 150% par exemple).
### Du coup, on utilisera un autre check qui passera par un extend
### de snmp et ira pendre les informations via la commande df qui, elle,
### ne se trompe pas a priori.
#
# Commande qui teste l'espace disponible sur les partition appartenant
# à des disques locaux.
define command {
    command_name check_linux_disks_old
    # L'option « -m "^/" » signifie qu'on recherche toutes les partitions
    # dont le point de montage commence par / (ie toutes les partitions)
    # L'option -f rend la sortie de la
    # commande compatible avec Perfparse ce qui peut-être utile avec
    # certains modules de shinken. Avec -w 80 on aura un warning dès que
    # plus de 80% d'au moins une partition est occupée. L'option -S1,1
    # permet de mettre en forme la sortie (voir la page d'aide).
    #
    # Avec l'option « --storagetype FixedDisk », on se limite aux partitions
    # situées sur des disques locaux uniquement.
    command_line "$PLUGINSDIR$/check_snmp_storage.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" -m "^/" -f -w "$_HOSTSTORAGE_WARN$" \
        -c "$_HOSTSTORAGE_CRIT$" -S1,1 --storagetype FixedDisk \
        $_HOSTSNMP_AUTH_OPTIONS$
}


define command {
    command_name check_linux_disks
    # Avec --warning 80 on aura un warning dès que
    # plus de 80% d'au moins une partition est occupée.
    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_storage" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTSTORAGE_WARN$" --critical "$_HOSTSTORAGE_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande qui va checker la RAM et la swap de l'hôte.
define command {
    command_name check_linux_memory
    # Avec cette commande, par défaut, la mémoire cache n'est pas prise en
    # compte comme mémoire occupée. Aucune raison de le faire mais avec
    # l'option -m on peut prendre en compte la mémoire cache de la RAM
    # comme mémoire occupée. Avec par exemple « -w 90,30 », un warning
    # sera levé si la RAM est occupée à plus de 90% ou si la swap est
    # occupée à plus de 30%. Un seuil à 0 ne lève jamais de warning.
    command_line "$PLUGINSDIR$/check_snmp_mem.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" -f -w "$_HOSTMEMORY_WARN$" -c "$_HOSTMEMORY_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le trafic réseau.
define command {
    command_name check_linux_network_usage
    # L'option -n correspond à une regex correspondant à la liste des
    # interfaces réseau que l'on souhaite checker (par exemple "eth\d+|em\d+"
    # qui correspondra à toutes les cartes réseau de la forme eth<N> ou em<N>).
    # L'option -f rend la sortie de la commande compatible avec Perfparse.
    # Les options « -B -M » permettront d'afficher les quantités mesurées
    # en Mbps (ie en mégas bits par secondes). L'option -k permet de
    # mesurer uniquement les flux I/O au niveau des cartes réseau (et
    # de ne pas mesurer les « error et discard I/O » ce que permet l'option
    # -q pas utilisée ici). L'option -Z affiche les « performance data » en
    # bytes. L'option --label permet d'ajouter les labes in et out dans
    # la sortie.
    # On aura par exemple « -w 300,500 » qui donne un seuil de warning
    # de 300 Mbps en entrée (in) et de 500 Mbps en sortie (out).
    # L'option -P permet d'indiquer les « performance data » du check
    # précédent afin de pouvoir calculer un delta (dans l'argument de
    # cette option se trouve le timestamp du check précédent ainsi que
    # les valeurs mesurées à ce moment là). Je pensais qu'ainsi le plugin
    # mesurait le débit moyen entre deux checks mais il semble que ce soit
    # un peu plus subtil que ça. En revanche, j'ai pu tester qu'effectivement
    # au bout de 3 checks, les valeurs indiquées finissent par correspondre
    # bien au débit moyen (attention il s'agit d'un début brut pas d'un début
    # utile).

    # Note: $SERVICEPERFDATA$ can contain double quotes ("), so the macro
    #       is inside simple quotes (').
    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_netint.pl" -H "$HOSTADDRESS$" \
        --timeout "$TIMEOUT$" -n "$_HOSTINTERFACES$" -f -B -M -k -Z --label \
        -w "$_HOSTNET_WARN$" -c "$_HOSTNET_CRIT$" -P '$SERVICEPERFDATA$' \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le service ssh.
define command {
    command_name check_linux_ssh
    # Ah les plugins pour checker un service c'est quand même plus simple...
    command_line "$PLUGINSDIR$/check_ssh" -p "$_HOSTSSH_PORT$" \
        --timeout "$TIMEOUT$" "$HOSTADDRESS$"
}


# Command wich checks the reboot by comparing the uptime with the
# previous uptime. This check is volatile. But when a host is
# DOWN according to shinken, there no notification. So, with this
# check, it's possible to miss the notification.
define command {
    command_name check_linux_reboot

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_reboot" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}

# Other command to check the reboot, more secure than chech_linux_reboot
# because this check isn't volatile.
define command {
    command_name check_linux_reboot_secure

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_reboot_secure" \
        --host "$HOSTADDRESS$" --warning="$_HOSTREBOOT_WARN$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}

# Commande pour checker la lecture (in) et l'écriture (out) sur la swap en
# kiloBytes/s, moyenne calculée sur la dernière minute précédent la requête.
define command {
    command_name check_linux_swap_io

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_swap_io" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTSWAP_WARN$" --critical "$_HOSTSWAP_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker l'écart de temps entre l'hôte et le serveur shinken.
# C'est l'écart entre les timestamps des deux machines qui est comparé aux
# seuils warning et critical qui sont exprimés en secondes.
define command {
    command_name check_linux_time

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_time" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTTIME_WARN$" --critical "$_HOSTTIME_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le nombre de processus chargés et le nombre de
# processus dans l'état "running".
define command {
    command_name check_linux_processes

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_processes" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning "$_HOSTPROCESS_WARN$" --critical "$_HOSTPROCESS_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le changement de certains fichiers sensibles.
# La liste des fichiers est présente en dur dans le script local au nœud
# de supervision qui calcule une empreinte de chacun d'eux.
# Attention, tous ces fichiers ne doivent pas contenir d'espace dans leur nom.
define command {
    command_name check_linux_sensitive_files

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_sensitive_files" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker le nom d'hôte d'un nœud de supervision et vérifier
# qu'il est bien identique au nom donné via l'option --hostname.
define command {
    command_name check_linux_hostname

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_hostname" \
        --host "$HOSTADDRESS$" --hostname="$HOSTNAME$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker un éventuel changement de la sortie de « uname -a ».
define command {
    command_name check_linux_uname

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_uname" \
        --host "$HOSTADDRESS$" --perfdata "$SERVICEPERFDATA$" \
        --timeout "$TIMEOUT$" $_HOSTSNMP_AUTH_OPTIONS$
}


# Commande pour checker les pourcentages des inodes utilisés sur les disques.
define command {
    command_name check_linux_inodes

    # Par exemple --warning=75 signifie qu'un warning sera levé si au
    # moins un des disques a 75% ou plus d'inodes utilisés.
    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_inodes" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        --warning="$_HOSTINODES_WARN$" --critical="$_HOSTINODES_CRIT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}

# Command to check the mountpoints in a host.
define command {
    command_name check_linux_mounts

    command_line "$SHINKEN_PACKS_PLUGINSDIR$/check_snmp_mounts" \
        --host "$HOSTADDRESS$" --timeout "$TIMEOUT$" \
        $_HOSTSNMP_AUTH_OPTIONS$
}


